CRAWLING SYSTEM - HỆ THỐNG CRAWLING DỮ LIỆU
===========================================

1. THÔNG TIN CHUNG
-----------------
- Tên dự án: Crawling System
- Mô tả: Hệ thống tự động crawl dữ liệu từ các trang tin tức tiếng Việt và tiếng Trung
- Kiến trúc: Microservice với Docker
- Ngôn ngữ: Python (Backend), JavaScript/TypeScript (Frontend)

2. CẤU TRÚC THƯ MỤC
------------------
/Crawling System
├── frontend/           # ReactJS frontend
├── backend/           # FastAPI backend
├── scraper/           # Scrapy crawler
├── docker-compose.yml # Docker configuration
└── package-lock.json

3. CÁC THÀNH PHẦN CHÍNH
----------------------
3.1. Frontend (ReactJS)
- Port: 3001
- Container: crawler_frontend
- API URL: http://localhost:8000

3.2. Backend (FastAPI)
- Port: 8000
- Container: crawler_backend
- Celery Worker

3.3. Message Queue (RabbitMQ)
- Ports: 
  + 5672 (AMQP)
  + 15672 (Management UI)
- Credentials: admin/admin123
- Queues: 
  + delegate_queue
  + scraper_queue

3.4. Database (MongoDB)
- Port: 27017
- Credentials: root/example
- Collections:
  + articles
  + tasks
  + users

4. CẤU HÌNH DOCKER
-----------------
4.1. Services
- rabbitmq: Message queue
- mongodb: Database
- backend: API server
- backend_worker: Celery worker
- scraper_worker: Scraper worker
- frontend: Web interface

4.2. Networks
- crawler_network: Bridge network

4.3. Volumes
- rabbitmq_data
- rabbitmq_logs
- mongodb_data
- backend_logs
- scraper_logs

5. QUY TRÌNH HOẠT ĐỘNG
---------------------
5.1. Khởi động hệ thống
- docker-compose up -d
- Health checks
- Service connections

5.2. Crawling process
- Frontend request
- Backend task creation
- RabbitMQ queue
- Scraper worker
- MongoDB storage

6. MONITORING & LOGGING
----------------------
6.1. Log locations
- Backend: /app/logs
- Scraper: /app/logs
- RabbitMQ: /var/log/rabbitmq
- MongoDB: Standard output

6.2. Health checks
- Interval: 30s
- Timeout: 10s
- Retries: 5

7. BẢO MẬT
---------
7.1. Network
- Isolated containers
- Bridge network
- Port mapping

7.2. Authentication
- MongoDB: root/example
- RabbitMQ: admin/admin123
- API: JWT

8. KHẮC PHỤC SỰ CỐ
-----------------
8.1. Common issues
- Connection problems
- Performance issues
- Service failures

8.2. Debugging commands
- docker-compose logs [service]
- docker-compose ps
- docker logs [container]

9. HƯỚNG PHÁT TRIỂN
------------------
9.1. Tính năng mới
- Thêm nguồn dữ liệu
- Hỗ trợ ngôn ngữ mới
- Cải thiện UI/UX

9.2. Tối ưu hóa
- Caching
- Database indexing
- Worker optimization

10. LỆNH HỮU ÍCH
---------------
# Khởi động hệ thống
docker-compose up -d

# Xem logs
docker-compose logs -f [service]

# Kiểm tra trạng thái
docker-compose ps

# Rebuild service
docker-compose build [service]

# Restart service
docker-compose restart [service]

# Xem logs của container
docker logs [container_id]

# Vào container
docker exec -it [container_id] /bin/bash

11. LIÊN HỆ & HỖ TRỢ
-------------------
- Developer: [Your Name]
- Email: [Your Email]
- Repository: [Git Repository URL]

===========================================
Last updated: [Current Date] 